import { NextRequest, NextResponse } from 'next/server';
import { GoogleDriveService } from '@/lib/google-drive-service';
import { createClient } from '@/supabase/server';

function formatContentAsMarkdown(content: any, type: string): string {
  let markdown = '';
  
  switch (type) {
    case 'flashcards':
      markdown = '# Flashcards\n\n';
      if (Array.isArray(content)) {
        content.forEach((card: any, index: number) => {
          markdown += `## Card ${index + 1}\n\n`;
          markdown += `**Question:** ${card.question || card.front}\n\n`;
          markdown += `**Answer:** ${card.answer || card.back}\n\n`;
          if (card.difficulty) {
            markdown += `**Difficulty:** ${card.difficulty}\n\n`;
          }
          markdown += '---\n\n';
        });
      }
      break;
      
    case 'quiz':
      markdown = '# Quiz\n\n';
      if (Array.isArray(content)) {
        content.forEach((question: any, index: number) => {
          markdown += `## Question ${index + 1}\n\n`;
          markdown += `${question.question}\n\n`;
          if (question.options) {
            question.options.forEach((option: string, optIndex: number) => {
              markdown += `${String.fromCharCode(65 + optIndex)}. ${option}\n`;
            });
            markdown += '\n';
          }
          markdown += `**Answer:** ${question.answer}\n\n`;
          if (question.explanation) {
            markdown += `**Explanation:** ${question.explanation}\n\n`;
          }
          markdown += '---\n\n';
        });
      }
      break;
      
    case 'summary':
      markdown = '# Summary\n\n';
      markdown += content;
      break;
      
    case 'notes':
      markdown = '# Study Notes\n\n';
      markdown += content;
      break;
      
    default:
      markdown = content;
  }
  
  // Add metadata
  markdown += '\n\n---\n\n';
  markdown += `*Generated by StudyWithAI on ${new Date().toLocaleDateString()}*`;
  
  return markdown;
}

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient();
    
    // Check if user is authenticated
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Not authenticated' },
        { status: 401 }
      );
    }

    const { content, type, fileName, folderId } = await request.json();

    if (!content || !type) {
      return NextResponse.json(
        { error: 'Content and type are required' },
        { status: 400 }
      );
    }

    // Get valid access token
    const accessToken = await GoogleDriveService.getValidAccessToken(user.id);
    
    // Initialize Drive service
    const driveService = new GoogleDriveService(accessToken, user.id);
    
    // Get or create StudyWithAI folder
    const studyFolderId = folderId || await driveService.getOrCreateStudyFolder();
    
    // Format content as markdown
    const markdownContent = formatContentAsMarkdown(content, type);
    
    // Generate filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const finalFileName = fileName || `StudyWithAI_${type}_${timestamp}.md`;
    
    // Create file in Google Drive
    const file = await driveService.createFile(
      finalFileName,
      markdownContent,
      'text/markdown',
      studyFolderId
    );

    // Store reference in database
    await supabase
      .from('linked_drive_files')
      .insert({
        user_id: user.id,
        file_id: file.id!,
        name: file.name!,
        mime_type: 'text/markdown',
        drive_url: file.webViewLink!,
        parent_folder_id: studyFolderId,
        size_bytes: Buffer.byteLength(markdownContent, 'utf8'),
      });

    return NextResponse.json({
      file: {
        id: file.id,
        name: file.name,
        url: file.webViewLink,
      },
      message: 'Content uploaded to Google Drive successfully'
    });
  } catch (error: any) {
    console.error('Error uploading to Drive:', error);
    
    if (error.message === 'No Google Drive connection found') {
      return NextResponse.json(
        { error: 'Google Drive not connected' },
        { status: 403 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to upload content' },
      { status: 500 }
    );
  }
}